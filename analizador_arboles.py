#!/usr/bin/env python3
import google.generativeai as genai
from PIL import Image
import json
import os
import sys
import argparse
import glob
from pathlib import Path
from datetime import datetime

class AnalizadorArboles:
    def __init__(self, api_key):
        """Inicializar el analizador con la API key de Gemini"""
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
    def analizar_arbol(self, imagen_path):
        """Analiza una imagen individual de √°rbol usando Gemini"""
        try:
            imagen = Image.open(imagen_path)
            
            prompt = """Como experto arboricultor, analiza esta imagen y responde las siguientes preguntas:

1. ¬øEl √°rbol est√° interfiriendo con la visibilidad de se√±ales o sem√°foros? Indica si la obstrucci√≥n es parcial o total.
2. ¬øSe observan ramas o follaje tocando o muy pr√≥ximas a fachadas, farolas u otros elementos construidos? Clasifica la severidad: leve, moderada o severa.
3. ¬øPresenta el √°rbol s√≠ntomas de mal estado (coloraci√≥n an√≥mala, baja densidad foliar, grietas, ramas rotas, inclinaci√≥n peligrosa)? Enumera los s√≠ntomas detectados.
4. ¬øHay ramas que proyecten sobre la calzada por debajo de 4,5 m o sobre la acera por debajo de 2,2 m? Se√±ala ubicaci√≥n y grado de severidad.
5. ¬øSe detectan bolsones sedosos caracter√≠sticos de la procesionaria? Indica n√∫mero aproximado y proximidad a zonas sensibles (colegios, parques).
6. ¬øAparecen estructuras de gran tama√±o (> 40 cm) en la copa, como nidos de cotorras? Describe su di√°metro aproximado y posici√≥n en el √°rbol.

Responde SOLO en formato JSON v√°lido con la siguiente estructura:
{
    "interferencia_senales": "...",
    "ramas_follaje": "...",
    "sintomas_mal_estado": "...",
    "ramas_circulacion": "...",
    "bolsones_procesionaria": "...",
    "estructuras_copa": "...",
    "descripcion": "descripci√≥n breve"
}
"""
            
            response = self.model.generate_content([prompt, imagen])
            return response.text
            
        except Exception as e:
            return json.dumps({
                "error": str(e),
                "hay_arbol": False,
                "estado_general": "error",
                "riesgo_nivel": 0,
                "descripcion": f"Error procesando imagen: {str(e)}"
            })
    
    def procesar_imagen_individual(self, imagen_path):
        """Procesa una imagen individual"""
        print(f"üå≥ Analizando: {Path(imagen_path).name}")
        
        try:
            analisis_texto = self.analizar_arbol(imagen_path)
            
            # Intentar parsear JSON
            try:
                analisis = json.loads(analisis_texto)
            except json.JSONDecodeError:
                # Si no es JSON v√°lido, crear estructura b√°sica
                analisis = {
                    "hay_arbol": "√°rbol" in analisis_texto.lower(),
                    "estado_general": "indeterminado",
                    "riesgo_nivel": 5,
                    "descripcion": "An√°lisis no estructurado",
                    "analisis_texto": analisis_texto
                }
            
            # Mostrar resumen en consola
            if analisis.get('hay_arbol', False):
                estado = analisis.get('estado_general', 'indeterminado')
                riesgo = analisis.get('riesgo_nivel', 0)
                descripcion = analisis.get('descripcion', '')
                print(f"   ‚úÖ √Årbol detectado")
                print(f"   üìä Estado: {estado}")
                print(f"   ‚ö†Ô∏è  Riesgo: {riesgo}/10")
                if descripcion:
                    print(f"   üìù {descripcion}")
                
                problemas = analisis.get('problemas', [])
                if problemas:
                    print(f"   üö® Problemas: {', '.join(problemas)}")
                    
                obstrucciones = analisis.get('obstrucciones', [])
                if obstrucciones:
                    print(f"   üöß Obstrucciones: {', '.join(obstrucciones)}")
            else:
                print(f"   ‚ö™ No se detect√≥ √°rbol en esta imagen")
            
            return analisis
            
        except Exception as e:
            print(f"   ‚ùå Error analizando imagen: {e}")
            return {
                "error": str(e),
                "hay_arbol": False,
                "estado_general": "error",
                "riesgo_nivel": 0
            }
    
    def procesar_directorio(self, directorio):
        """Procesa todas las im√°genes de un directorio"""
        extensiones = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
        imagenes = []
        
        for ext in extensiones:
            imagenes.extend(glob.glob(os.path.join(directorio, ext)))
            imagenes.extend(glob.glob(os.path.join(directorio, ext.upper())))
        
        if not imagenes:
            print(f"‚ùå No se encontraron im√°genes en {directorio}")
            return []
        
        print(f"üìÅ Procesando {len(imagenes)} im√°genes del directorio: {directorio}")
        
        resultados = []
        for i, imagen_path in enumerate(imagenes, 1):
            print(f"\n[{i}/{len(imagenes)}]", end=" ")
            
            try:
                analisis = self.procesar_imagen_individual(imagen_path)
                resultado = {
                    'imagen': imagen_path,
                    'nombre': Path(imagen_path).name,
                    'analisis': analisis
                }
                resultados.append(resultado)
                
            except Exception as e:
                print(f"‚ùå Error procesando {Path(imagen_path).name}: {e}")
                resultados.append({
                    'imagen': imagen_path,
                    'nombre': Path(imagen_path).name,
                    'error': str(e)
                })
        
        return resultados
    
    def guardar_resultados(self, resultados, output_file):
        """Guarda los resultados en un archivo JSON"""
        try:
            # Crear directorio de salida si no existe
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(resultados, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultados guardados en: {output_file}")
            return True
        except Exception as e:
            print(f"‚ùå Error guardando resultados: {e}")
            return False
    
    def generar_resumen(self, resultados):
        """Genera un resumen de los resultados"""
        if not resultados:
            return
        
        total = len(resultados)
        con_arboles = sum(1 for r in resultados if r.get('analisis', {}).get('hay_arbol', False))
        errores = sum(1 for r in resultados if 'error' in r)
        
        # Calcular estad√≠sticas de riesgo
        riesgos = []
        estados = {}
        
        for resultado in resultados:
            analisis = resultado.get('analisis', {})
            if isinstance(analisis, dict) and analisis.get('hay_arbol', False):
                riesgo = analisis.get('riesgo_nivel', 0)
                if isinstance(riesgo, (int, float)):
                    riesgos.append(riesgo)
                
                estado = analisis.get('estado_general', 'desconocido')
                estados[estado] = estados.get(estado, 0) + 1
        
        print(f"\nüìä RESUMEN DEL AN√ÅLISIS")
        print(f"{'='*40}")
        print(f"Total im√°genes procesadas: {total}")
        print(f"Im√°genes con √°rboles: {con_arboles}")
        print(f"Im√°genes sin √°rboles: {total - con_arboles - errores}")
        print(f"Errores: {errores}")
        
        if riesgos:
            riesgo_promedio = sum(riesgos) / len(riesgos)
            riesgo_maximo = max(riesgos)
            print(f"\nRiesgo promedio: {riesgo_promedio:.1f}/10")
            print(f"Riesgo m√°ximo: {riesgo_maximo}/10")
            
        if estados:
            print(f"\nEstados encontrados:")
            for estado, cantidad in estados.items():
                print(f"  {estado}: {cantidad}")

class AnalizadorAlcorques:
    def __init__(self, api_key):
        """Inicializar el analizador de alcorques con la API key de Gemini"""
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
    def analizar_alcorque(self, imagen_path):
        """Analiza una imagen individual de alcorque usando Gemini"""
        try:
            imagen = Image.open(imagen_path)
            
            prompt = """Como experto en gesti√≥n de alcorques, analiza esta imagen y eval√∫a:

1. ¬øSe observan levantamientos, grietas o desplazamientos en el pavimento junto al alcorque? ¬øHay ra√≠ces superficiales conectando el da√±o con el √°rbol?
2. ¬øEl alcorque est√° completamente vac√≠o (sin √°rbol ni toc√≥n)? Confirma asimismo la ausencia de plantones o tutores recientes.
3. ¬øHay basura, escombros u otros objetos no autorizados dentro del alcorque? Describe su naturaleza y volumen aproximado.
4. ¬øSe aprecia un toc√≥n en el alcorque? Indica su altura aproximada y posici√≥n relativa al borde.
5. ¬øLa cobertura de malas hierbas supera el 50 % de la superficie o su altura excede los 15 cm? Indica densidad y especies dominantes.
6. ¬øHay presencia de charcos o encharcamientos en el alcorque o acera adyacente? Estima su extensi√≥n y si el agua parece estancada o reciente.

Responde SOLO en formato JSON v√°lido con la siguiente estructura:
{
    "levantamientos": "...",
    "alcorque_vacio": true/false,
    "basura": "...",
    "tocon": "...",
    "malas_hierbas": "...",
    "charcos": "...",
    "descripcion": "descripci√≥n breve"
}
"""
            
            response = self.model.generate_content([prompt, imagen])
            return response.text
            
        except Exception as e:
            return json.dumps({
                "error": str(e),
                "descripcion": f"Error procesando imagen de alcorque: {str(e)}"
            })

    def procesar_imagen_individual_alcorque(self, imagen_path):
        """Procesa una imagen individual de alcorque"""
        print(f"üõ†Ô∏è Analizando alcorque: {Path(imagen_path).name}")
        
        try:
            analisis_texto = self.analizar_alcorque(imagen_path)
            try:
                analisis = json.loads(analisis_texto)
            except json.JSONDecodeError:
                analisis = {
                    "analisis_texto": analisis_texto
                }
            return analisis
        except Exception as e:
            print(f"   ‚ùå Error analizando alcorque: {e}")
            return {
                "error": str(e)
            }

    def procesar_directorio_alcorque(self, directorio):
        """Procesa todas las im√°genes de un directorio de alcorques"""
        extensiones = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
        imagenes = []
        for ext in extensiones:
            imagenes.extend(glob.glob(os.path.join(directorio, ext)))
            imagenes.extend(glob.glob(os.path.join(directorio, ext.upper())))
        if not imagenes:
            print(f"‚ùå No se encontraron im√°genes de alcorques en {directorio}")
            return []
        print(f"üìÅ Procesando {len(imagenes)} im√°genes de alcorques en el directorio: {directorio}")
        resultados = []
        for i, imagen_path in enumerate(imagenes, 1):
            print(f"\n[{i}/{len(imagenes)}]", end=" ")
            analisis = self.procesar_imagen_individual_alcorque(imagen_path)
            resultados.append({'imagen': imagen_path, 'nombre': Path(imagen_path).name, 'analisis': analisis})
        return resultados

    def guardar_resultados_alcorque(self, resultados, output_file):
        """Guarda los resultados de alcorques en un archivo JSON"""
        try:
            # Crear directorio de salida si no existe
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(resultados, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultados de alcorques guardados en: {output_file}")
            return True
        except Exception as e:
            print(f"‚ùå Error guardando resultados de alcorques: {e}")
            return False

    def generar_resumen_alcorque(self, resultados):
        """Genera resumen de resultados de alcorques"""
        if not resultados:
            return
        total = len(resultados)
        errores = sum(1 for r in resultados if 'error' in r.get('analisis', {}))
        print(f"\nüìä RESUMEN AN√ÅLISIS ALCORQUES")
        print(f"{'='*40}")
        print(f"Total im√°genes procesadas: {total}")
        print(f"Errores: {errores}")


def inferir_tipo_desde_nombre(nombre_archivo):
    """Infiere el tipo de an√°lisis desde el nombre del archivo"""
    nombre_lower = nombre_archivo.lower()
    if "_tree_" in nombre_lower or nombre_lower.endswith("_tree") or "_tree." in nombre_lower:
        return 'arboles'
    elif "_planter_" in nombre_lower or "_alcorque_" in nombre_lower or "_planter." in nombre_lower:
        return 'alcorques'
    else:
        return None

def procesar_directorio_mixto(directorio, analizador_arboles, analizador_alcorques):
    """Procesa un directorio con im√°genes mixtas (√°rboles y alcorques)"""
    extensiones = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
    imagenes = []
    
    for ext in extensiones:
        imagenes.extend(glob.glob(os.path.join(directorio, ext)))
        imagenes.extend(glob.glob(os.path.join(directorio, ext.upper())))
    
    if not imagenes:
        print(f"‚ùå No se encontraron im√°genes en {directorio}")
        return {'arboles': [], 'alcorques': []}
    
    print(f"üìÅ Procesando {len(imagenes)} im√°genes del directorio: {directorio}")
    
    resultados_arboles = []
    resultados_alcorques = []
    sin_clasificar = []
    
    for i, imagen_path in enumerate(imagenes, 1):
        nombre_archivo = Path(imagen_path).name
        tipo = inferir_tipo_desde_nombre(nombre_archivo)
        
        print(f"\n[{i}/{len(imagenes)}] {nombre_archivo}", end=" ")
        
        if tipo == 'arboles':
            print("(üå≥)", end=" ")
            try:
                analisis = analizador_arboles.procesar_imagen_individual(imagen_path)
                resultado = {
                    'imagen': imagen_path,
                    'nombre': nombre_archivo,
                    'analisis': analisis
                }
                resultados_arboles.append(resultado)
            except Exception as e:
                print(f"‚ùå Error: {e}")
                resultados_arboles.append({
                    'imagen': imagen_path,
                    'nombre': nombre_archivo,
                    'error': str(e)
                })
                
        elif tipo == 'alcorques':
            print("(üõ†Ô∏è)", end=" ")
            try:
                analisis = analizador_alcorques.procesar_imagen_individual_alcorque(imagen_path)
                resultado = {
                    'imagen': imagen_path,
                    'nombre': nombre_archivo,
                    'analisis': analisis
                }
                resultados_alcorques.append(resultado)
            except Exception as e:
                print(f"‚ùå Error: {e}")
                resultados_alcorques.append({
                    'imagen': imagen_path,
                    'nombre': nombre_archivo,
                    'error': str(e)
                })
        else:
            print("(‚ùì No clasificado)")
            sin_clasificar.append(nombre_archivo)
    
    if sin_clasificar:
        print(f"\n‚ö†Ô∏è  Archivos no clasificados (no contienen 'tree' ni 'planter'): {len(sin_clasificar)}")
        for archivo in sin_clasificar[:5]:  # Mostrar solo los primeros 5
            print(f"   - {archivo}")
        if len(sin_clasificar) > 5:
            print(f"   ... y {len(sin_clasificar) - 5} m√°s")
    
    return {
        'arboles': resultados_arboles,
        'alcorques': resultados_alcorques,
        'sin_clasificar': sin_clasificar
    }

def crear_ruta_output(entrada, tipo=None):
    """Crea la ruta de output en la carpeta resultados/"""
    # Obtener directorio ra√≠z del script
    script_dir = Path(__file__).parent
    resultados_dir = script_dir / "resultados"
    
    # Crear directorio resultados si no existe
    resultados_dir.mkdir(exist_ok=True)
    
    if os.path.isfile(entrada):
        # Para imagen individual: resultados/nombre_imagen_tipo.json
        nombre_base = Path(entrada).stem
        if tipo:
            output_file = resultados_dir / f"{nombre_base}_{tipo}.json"
        else:
            output_file = resultados_dir / f"{nombre_base}.json"
    else:
        # Para directorio: resultados/nombre_directorio_mixto_timestamp.json
        nombre_directorio = Path(entrada).name
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        if tipo:
            output_file = resultados_dir / f"{nombre_directorio}_{tipo}_{timestamp}.json"
        else:
            output_file = resultados_dir / f"{nombre_directorio}_mixto_{timestamp}.json"
    
    return str(output_file)


def main():
    parser = argparse.ArgumentParser(description='Analizador de im√°genes de √°rboles y alcorques con IA')
    parser.add_argument('entrada', help='Ruta a imagen individual o directorio con im√°genes')
    parser.add_argument('--api-key', required=True, help='API Key de Google Gemini')
    parser.add_argument('--output', '-o', help='Archivo para guardar resultados JSON (por defecto en carpeta resultados/)')
    parser.add_argument('--resumen', action='store_true', help='Mostrar resumen al final')
    parser.add_argument('--tipo', choices=['arboles','alcorques'], help='Forzar tipo de agente (por defecto se infiere del nombre de archivo)')
    
    args = parser.parse_args()
    
    # Verificar entrada
    if not os.path.exists(args.entrada):
        print(f"‚ùå Error: No se encontr√≥ {args.entrada}")
        sys.exit(1)
    
    # Modo directorio o archivo individual
    es_directorio = os.path.isdir(args.entrada)
    
    if es_directorio and not args.tipo:
        # Modo directorio mixto - procesar cada imagen seg√∫n su nombre
        print("üìÅ Modo: Directorio mixto (detectando tipo por nombre de archivo)")
        
        # Inicializar ambos analizadores
        try:
            analizador_arboles = AnalizadorArboles(args.api_key)
            analizador_alcorques = AnalizadorAlcorques(args.api_key)
            print("‚úÖ Analizadores inicializados correctamente")
        except Exception as e:
            print(f"‚ùå Error inicializando analizadores: {e}")
            sys.exit(1)
        
        # Procesar directorio mixto
        resultados_mixtos = procesar_directorio_mixto(args.entrada, analizador_arboles, analizador_alcorques)
        
        # Crear salida si no se especific√≥
        if not args.output:
            args.output = crear_ruta_output(args.entrada)
            print(f"üìÅ Resultados se guardar√°n en: {args.output}")
        
        # Guardar resultados mixtos
        try:
            output_path = Path(args.output)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(resultados_mixtos, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultados guardados en: {args.output}")
        except Exception as e:
            print(f"‚ùå Error guardando resultados: {e}")
        
        # Mostrar resumen si se solicita
        if args.resumen:
            print(f"\nüìä RESUMEN DEL AN√ÅLISIS MIXTO")
            print(f"{'='*40}")
            print(f"Im√°genes de √°rboles procesadas: {len(resultados_mixtos['arboles'])}")
            print(f"Im√°genes de alcorques procesadas: {len(resultados_mixtos['alcorques'])}")
            print(f"Im√°genes sin clasificar: {len(resultados_mixtos['sin_clasificar'])}")
            
            # Resumen detallado para √°rboles si hay
            if resultados_mixtos['arboles']:
                analizador_arboles.generar_resumen(resultados_mixtos['arboles'])
            
            # Resumen detallado para alcorques si hay
            if resultados_mixtos['alcorques']:
                analizador_alcorques.generar_resumen_alcorque(resultados_mixtos['alcorques'])
        
    else:
        # Modo tradicional - un solo tipo
        if os.path.isfile(args.entrada):
            # Derivar tipo para imagen individual si no se especific√≥
            if not args.tipo:
                args.tipo = inferir_tipo_desde_nombre(Path(args.entrada).name)
                if not args.tipo:
                    print("‚ö†Ô∏è  No pude derivar el tipo de agente del nombre de la imagen.")
                    print("    Usa --tipo arboles o --tipo alcorques para especificarlo.")
                    sys.exit(1)
                print(f"üîç Tipo detectado: {args.tipo}")
        
        # Crear ruta de output si no se especific√≥
        if not args.output:
            args.output = crear_ruta_output(args.entrada, args.tipo)
            print(f"üìÅ Resultados se guardar√°n en: {args.output}")

        # Inicializar analizador espec√≠fico
        try:
            if args.tipo == 'alcorques':
                analizador = AnalizadorAlcorques(args.api_key)
            else:
                analizador = AnalizadorArboles(args.api_key)
            print("‚úÖ Analizador inicializado correctamente")
        except Exception as e:
            print(f"‚ùå Error inicializando analizador: {e}")
            sys.exit(1)
        
        # Procesar seg√∫n tipo
        if os.path.isfile(args.entrada):
            # Procesar imagen individual
            print(f"\nüì∏ Modo: Imagen individual")
            if args.tipo == 'alcorques':
                analisis = analizador.procesar_imagen_individual_alcorque(args.entrada)
            else:
                analisis = analizador.procesar_imagen_individual(args.entrada)
            
            resultados = [{
                'imagen': args.entrada,
                'nombre': Path(args.entrada).name,
                'analisis': analisis
            }]
            
        elif os.path.isdir(args.entrada):
            # Procesar directorio de un solo tipo
            print(f"\nüìÅ Modo: Directorio de {args.tipo}")
            if args.tipo == 'alcorques':
                resultados = analizador.procesar_directorio_alcorque(args.entrada)
            else:
                resultados = analizador.procesar_directorio(args.entrada)
        else:
            print(f"‚ùå Error: {args.entrada} no es un archivo ni directorio v√°lido")
            sys.exit(1)
        
        # Guardar resultados
        if args.tipo == 'alcorques':
            analizador.guardar_resultados_alcorque(resultados, args.output)
        else:
            analizador.guardar_resultados(resultados, args.output)
        
        # Mostrar resumen si se solicita
        if args.resumen:
            if args.tipo == 'alcorques':
                analizador.generar_resumen_alcorque(resultados)
            else:
                analizador.generar_resumen(resultados)
    
    print(f"\nüéØ An√°lisis completado")

if __name__ == "__main__":
    main()